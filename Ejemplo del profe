
/*
 * Programa en C para PIC12F629 usando XC8
 * Recepci�n UART a 9600 baudios, 8 bits, sin paridad, 1 bit de stop
 * Detecci�n de Start Bit por interrupci�n externa (flanco descendente en GP3)
 * Captura de bits mediante Timer0
 *
 * PIC12F629
 * Oscilador interno: 4 MHz
 * Baud Rate: 9600
 */

// CONFIG
#pragma config FOSC = INTRCIO   // Oscilador interno
#pragma config WDTE = ON       // Watchdog Timer activado
#pragma config PWRTE = OFF      // Power-up Timer desactivado
#pragma config MCLRE = OFF      // GP3 como I/O en lugar de MCLR
#pragma config BOREN = OFF      // Brown-out Reset desactivado
#pragma config CP = OFF         // Protecci�n de c�digo desactivada
#pragma config CPD = OFF        // Protecci�n de datos desactivada

#include <xc.h>

#define _XTAL_FREQ 4000000     // Frecuencia del oscilador interno



// Variables de la comunicacion con la PC
#define RX_PIN GP3
volatile unsigned char received_byte = 0;
volatile unsigned char bit_index = 0;
volatile unsigned char receiving = 0;
volatile unsigned char dato = 200;
#define TIMER0_RELOAD_RX 195   // Recarga de Timer0       // Tiempo de bit en microsegundos para 9600 baudios

// Transmision
#define TX_PIN GP4
volatile uint8_t tx_byte = 0xEE;     // Byte a enviar (0xAA)
volatile uint8_t send_flag = 0;      // Bandera para iniciar la transmisi�n
volatile uint8_t start_bit = 0;
#define TIMER0_RELOAD_TX 220


// Variables del PWM por software para el LED
#define LED GP0
volatile unsigned char pwm_power = 0;
volatile unsigned int led_ton = 0;
volatile unsigned int pwm_periodo = 1000;
volatile unsigned int tik = 0;

// Variables del control de Watchdog
volatile unsigned char time_out_wdt = 0;
volatile unsigned char time_out_120s = 0;

volatile unsigned char run_once = 1;
volatile unsigned char run_once_tx = 0;

volatile unsigned char prev_gpio = 0xFF;  // Estado anterior de los pines

void dimmer_led(void)
{
    led_ton = led_ton + 100;
    if (led_ton > 1000)
    {
        led_ton = 0;
    }
}

void __interrupt() ISR(void) {
    
    // Interrupci�n por cambios en los puertos
    
    if (INTCONbits.GPIF) {              // Verificar si ocurri� interrupci�n por cambio de pin
        
        // Leer el estado actual de GPIO
        unsigned char current_gpio = GPIO;
        
        if ((prev_gpio & (1 << 3)) && !(current_gpio & (1 << 3))) {             // Flanco descendente detectado (GP3 = 0) Comunicacion
            if (!receiving) {
                receiving = 1;          // Comienza la recepci�n de un nuevo byte
                bit_index = 0;
                TMR0 = 130;             // Pre cargar el Timer0 para un bit y medio 
                T0IF = 0;               // Limpiar la bandera de Timer0
                TMR0IE = 1;             // Habilitar interrupciones por Timer0
                received_byte = 0;
                
            }
            
            
        }
               
        if ((prev_gpio & (1 << 1)) && !(current_gpio & (1 << 1))) {             // Flanco descendente detectado (GP1 = 0) Pulsador
            dimmer_led();
            pwm_power = 1;
            TMR1ON = 1;                 // Prende el Timer
            
    
        }
        
        INTCONbits.GPIF = 0;        // Limpia la bandera de interrupci�n por cambio de pin
        prev_gpio = current_gpio;  // Actualizar el estado anterior
    }
    
    // Interrupci�n por Timer0
    
    if (T0IF) {  
               
        if (receiving)
        {
            //received_byte = received_byte | GP3;  // Leer el bit entrante
            IOC3 = 0;
            if (bit_index < 8) {
                received_byte >>= 1;
                received_byte |= RX_PIN << 7;
                bit_index++;
            } else {
                // Recepci�n completa
                receiving = 0;
                TMR0IE = 0;                         // Deshabilitar interrupciones por Timer0
                dato = received_byte;
                run_once = 0;
                               
                INTCONbits.GPIF = 0;                // Limpia la bandera de interrupci�n por cambio de pin
                IOC3 = 1;
                
            }
        }
        
        if (send_flag)  // Si estamos en proceso de enviar un byte
        {
            if (start_bit == 0)
            {
                TX_PIN = 0;
                start_bit = 1;
            }
            else
            {
                if (bit_index < 8)
                {
                    TX_PIN = tx_byte & 0x01;    // Enviar bit por GP0
                    tx_byte = tx_byte >> 1;
                    bit_index = bit_index + 1;
                }
                else
                {
                    TX_PIN = 1;     // Bit de parada
                    send_flag = 0;  // Fin de la transmisi�n
                    bit_index = 0;  // Reiniciar �ndice de bits
                    
                    start_bit = 0;
                }
            }
        }
               
        if (send_flag)
        {
            TMR0 = TIMER0_RELOAD_TX;
        }
        else
        {
            TMR0 = TIMER0_RELOAD_RX;
        }
        T0IF = 0;                                   // Limpiar la bandera de Timer0
    }
    
    // Interrupcion por Timer 1 cada 0.5 segundos
    if (T1IF) {
        // Gestion del watchdog
        time_out_wdt ++;
        if (time_out_wdt >= 240) // Si llego a 240 son 120 segundos 
        {
            time_out_120s = 1;
            TMR1ON = 0;          // Apaga el Timer 1 
        }
        else
        {
            time_out_120s = 0;
        }
        
        // Envio del 0xEE para avisar que faltan 20 segundos para reiniciar
        if (time_out_wdt >= 200)
        {
            if (run_once_tx == 0)
            {
                tx_byte = 'S';
                send_flag = 1;      // Inicia la transmision
                run_once_tx = 1;
            }
        }
        
        TMR1H = 0b00001011; 
        TMR1L = 0b11011011;       
        T1IF = 0;
    }
}

void main(void) {
     
    CMCON = 0x07;               // Desactiva completamente el m�dulo comparador
    
    // Configuraci�n de puertos
    TRISIO = 0b00001010;        // GP1 Pulsador y GP3 RX Comunicaci�n
    
    TX_PIN = 1;                 // Estado de reposo del puerto de comunicaci�n

    // Configuraci�n de interrupciones
    
    // Configuraci�n de Timer0 Resolucion 1us
    T0CS = 0;
    PSA  = 1;        // Prescaler asignado al watchdog
    T0IF = 0; 
    
    // Configuracion para prescaler en 128 --- equivale a 2.3 segundos de watchdog
    PS2 = 1;
    PS1 = 1;
    PS0 = 1;
    
    // Configuracion del Timer1 Resolucion
    TMR1CS = 0;                 // Clock proviene del interno Fosc/4
    T1CKPS0 = 1;                // Prescaler en 8 -> 125KHz o 8us 
    T1CKPS1 = 1;
    // Modulo = 0.5 / 8us = 62500 entonces 65536 - 62500 = 3036
    TMR1H = 0b00001011; 
    TMR1L = 0b11011011; 
    TMR1IE = 1;                 // Interrupcion por desborde activa
    INTCONbits.PEIE = 1;        // Habilita interrupciones de los perifericos
        
    // Configuracion de Interrupciones
    
    IOC3 = 1;                   // Interrupcion para la comunicaci�n
    IOC1 = 1;                   // Interrupcion para el pulsador   
    INTCONbits.GPIE = 1;        // Habilitar interrupciones por cambio en pines
       
    INTCONbits.GIE = 1;         // Habilitar interrupciones globales
        
    LED = 1;
    prev_gpio = GPIO;           // Inicializar estado anterior
    
    TMR0IE = 1;                 // Habilitar interrupciones por Timer0
    CLRWDT(); 
    __delay_ms(50);
    tx_byte = 'T';
    send_flag = 1;
    CLRWDT(); 
    __delay_ms(50);
    tx_byte = 'P';
    send_flag = 1;
    CLRWDT(); 
    __delay_ms(50);
    tx_byte = '1';
    send_flag = 1;
    CLRWDT(); 
    __delay_ms(50);
    CLRWDT(); 
    tx_byte = '_';
    send_flag = 1;
    CLRWDT(); 
    __delay_ms(50);
    
    while (1) {
        if (!receiving) {
            // Aqu� puedes procesar el byte recibido (received_byte)
            // Por ejemplo, enviarlo a otro puerto o manipularlo
            if (run_once == 0)
            {
               led_ton = dato;
               pwm_power = 1;
               TMR1ON = 1;
               run_once = 1;
               
               // Envio ACK
               CLRWDT(); 
               tx_byte = 0x1b;
               send_flag = 1;
               
            }
            
                
        }
        // Generacion del PWM 
        if(pwm_power == 1)
        {
            tik ++;
            if (tik >= led_ton)
                LED = 1;            // Apago el Led
            if (tik >= pwm_periodo)
            {
                LED = 0;
                tik = 0;
            } 
        }        
        // Le doy de comer al perro
        if (time_out_120s == 0)
        {
            CLRWDT();  // Resetea el Watchdog Timer
        }
        if (STATUSbits.nTO == 0)   //Se produjo una interrupcion por Watchdog
        {
            // Apago el Led y detengo el PWM 
            pwm_power = 0;          // Apago el pwm
            run_once_tx = 0;        // Reseteo el aviso de reset por comm
            LED = 0;                // Apago el Led
            
        }
    }
}
